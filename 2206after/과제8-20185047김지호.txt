#include <stdio.h>
//1 정수 인자를 받아 3배 하여 리턴 하는 함수를 만들고, (int  tripleValue(int)) 호출해보시오.
int tripleValue(int a);
int main() {
	int a;
	scanf_s("%d", &a);
	printf("%d",tripleValue(a));

}
int tripleValue(int a) {
	return 3 * a;
}

#include <stdio.h>
//2 정수변수 주소를 인자로 받아 해당 정수를 3배 하여 리턴 하는 함수를 만들어(  int  triplePointer1(int *) ) 호출해보시오.
int triplePointer(int* a);
int main() {
	int a = 5;
	printf("%d", triplePointer(&a));

}
int triplePointer(int* a) {
	return (*a) * 3;
}

#include<stdio.h>
//3 세 개의 정수포인터를 인자로 받아 제일 큰 수를 리턴 하는 함수를 만들고 호출해 보시오.
// (예)int  maxValue(int *, int *, int *)

int maxValue(int* a, int* b, int* c);
int main() {
	int a, b, c;
	scanf_s("%d%d%d", &a, &b, &c);
	printf("%d", maxValue(&a, &b, &c));
}
int maxValue(int* a, int* b, int* c) {
	int max = *a;
	if (*b > max && *b > *c)
		max = *b;
	else if (*c > max && *c > *b)
		max = *c;

	return max;

}

#include<stdio.h>
//4 세 개의 정수포인터를 인자로 받아 제일 큰 수의 주소를 리턴 하는 함수를 만들고 호출해 보시오. 
//(예)int * maxPosition(int *, int *, int *)

int * maxPosition(int* a, int* b, int* c);
int main() {
	int a, b, c;
	scanf_s("%d%d%d", &a, &b, &c);
	printf("%p\n%p\n%p\n", &a, &b, &c);
	printf("%p", maxPosition(&a, &b, &c));
}
int* maxPosition(int* a, int* b, int* c) {
	int  max = *a;
	int* maxp; // int *maxp=a; 
	maxp = a; //즉 a의 주소값임.
	if (*b > max && *b > *c)
		maxp = b;
	else if (*c > max && *c > *b)
		maxp = c;
	return maxp;
}

#include <stdio.h>
//5 포인터 인자의 해당변수를 N만큼 더해주는 함수를 만드시오.(  void   addN(int *p, int N)   )
void addN(int* p, int N);
int main() {
	int a, b;
	a = 5;
	b = 4;
	addN(&a, b);
}
void addN(int* p, int N) {
	printf("%d", * p + N);

}
#include<stdio.h>
//6 수업시간에 구현한 swap()함수를 그대로 이용하여 배열의 bubble 정렬을 구현하시오
void swap(int* a, int* b);
void bubble(int* a, int b);
int main() {
	int a[] = {3,4,2,1};
	bubble(a,4);
	printf("%d%d%d%d", a[0], a[1], a[2], a[3]);
}
void swap(int* a, int* b) {
	int t;
	t = *a;
	*a = *b;
	*b = t;

}
void bubble(int* a,int b) {
	for (int i = 0; i < b-1; i++) {
		for (int j = 0; j <b-1-i ; j++) {
			if(*(a+j)>*(a+j+1))  //a[j] > a[j+1]
				swap((a+j),(a+j+1)); //&a[j] &a[j+1]
		}
	}
}
#include <stdio.h>
void swap2(int * a, int *b);
int main() {
	int a = 2;
	int b = 3;
	int* pa = &a;
	int* pb = &b;
	printf("%p %p\n", pa,pb); // pa,pb의 값은 a,b의 주소값을가지고있음
	swap2(&pa, &pb); // 이후  pa->b, pb->a로 변경되야함	
	printf("%p %p", pa, pb);
}
void swap2(int** pp, int** qq) {
	int* t;
	
	puts("swap2");
	
	t = *pp;
	*pp = *qq;
	*qq = t;
	
}
//swap3(int **pp, int **qq)
//a,b,의 값을 바꾸어라. 주소가아닌 값을 바꾸어라 한번해보기.

// 20185047, 7%8+1=8.
#include <stdio.h>
//다음 2차원 배열 a에서 포인터 p와 q를 선언해 각각 배열의 가장 앞과 뒤의 주소를 저장한 후, 
//배열 a의 순서를 역으로 바꾸어 출력하는 프로그램작성
int main() {
	int a[] = { 11,22,33,44,55,66 };
	int* p, * q;
	p = &a[0];
	q = &a[5];
	int temp;
	for (int i = 0; i < 3; i++) {
		temp = *(p+i);
		*(p + i) = *(q - i);
		*(q - i) = temp;
	}
	printf("%d%d%d%d%d%d", a[0], a[1], p[2], a[3], a[4], a[5]);
}


